import React, { useState } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';

const ContactSection = styled.section`
  padding: 6rem 0;
  background: transparent;
`;

const Container = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.5rem;
`;

const SectionTitle = styled.h2`
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 3rem;
  color: var(--text-color);
  
  span {
    color: var(--primary-color);
  }
`;

const ContactContent = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

const ContactInfo = styled(motion.div)`
  background: rgba(23, 32, 56, 0.6);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border-radius: 15px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 2rem;
  
  h3 {
    font-size: 1.8rem;
    margin-bottom: 2rem;
    position: relative;
    color: var(--text-color);
    
    &:after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 50px;
      height: 3px;
      background-color: var(--primary-color);
    }
  }
  
  p {
    margin-bottom: 2rem;
    line-height: 1.8;
    color: var(--light-text-color);
  }
`;

const ContactItem = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 1.5rem;
  
  .icon {
    width: 50px;
    height: 50px;
    background-color: rgba(52, 152, 219, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-size: 1.5rem;
    color: var(--primary-color);
  }
  
  .text {
    h4 {
      font-size: 1.1rem;
      margin-bottom: 0.3rem;
      color: var(--text-color);
    }
    
    p {
      margin: 0;
      color: var(--light-text-color);
    }
  }
`;

const SocialLinks = styled.div`
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
  
  a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    color: var(--primary-color);
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    
    &:hover {
      background-color: var(--primary-color);
      color: #fff;
      transform: translateY(-3px);
    }
  }
`;

const FormContainer = styled(motion.div)`
  background: rgba(23, 32, 56, 0.6);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  padding: 2rem;
  border-radius: 15px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: var(--card-shadow);
  
  h3 {
    color: var(--text-color);
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
  }
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
`;

const FormGroup = styled.div`
  margin-bottom: 1.5rem;
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-color);
  }
  
  input, textarea {
    width: 100%;
    padding: 0.8rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    border-radius: 8px;
    font-family: inherit;
    transition: border 0.3s ease;
    
    &:focus {
      outline: none;
      border-color: var(--primary-color);
      background: rgba(255, 255, 255, 0.1);
    }
    
    &::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }
  }
  
  textarea {
    min-height: 150px;
    resize: vertical;
  }
`;

const SubmitButton = styled(motion.button)`
  background-color: var(--primary-color);
  color: white;
  padding: 1rem 2rem;
  border-radius: 50px;
  font-weight: 600;
  cursor: pointer;
  align-self: flex-start;
  margin-top: 1rem;
  box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
  
  &:hover {
    background-color: #2980b9;
  }
  
  &:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
  }
`;

const Alert = styled.div<{ $success?: boolean }>`
  padding: 1rem;
  margin-bottom: 1.5rem;
  border-radius: 8px;
  background-color: ${props => props.$success ? 'rgba(46, 204, 113, 0.2)' : 'rgba(231, 76, 60, 0.2)'};
  color: ${props => props.$success ? '#2ecc71' : '#e74c3c'};
  border-left: 4px solid ${props => props.$success ? '#2ecc71' : '#e74c3c'};
`;

interface FormData {
  name: string;
  email: string;
  subject: string;
  message: string;
}

function ContactForm() {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [alert, setAlert] = useState<{ message: string, success: boolean } | null>(null);
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setAlert(null);
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setAlert({
        message: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        success: true
      });
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        name: '',
        email: '',
        subject: '',
        message: ''
      });
    } catch (error) {
      setAlert({
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.',
        success: false
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <ContactSection id="contact">
      <Container>
        <SectionTitle>–°–≤—è–∑–∞—Ç—å—Å—è <span>—Å–æ –º–Ω–æ–π</span></SectionTitle>
        <ContactContent>
          <ContactInfo
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h3>–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç</h3>
            <p>
              –Ø –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–¥–µ–π –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º!
            </p>
            
            <ContactItem>
              <div className="icon">üìß</div>
              <div className="text">
                <h4>Email</h4>
                <p>your.email@example.com</p>
              </div>
            </ContactItem>
            
            <ContactItem>
              <div className="icon">üì±</div>
              <div className="text">
                <h4>–¢–µ–ª–µ—Ñ–æ–Ω</h4>
                <p>+7 (999) 123-45-67</p>
              </div>
            </ContactItem>
            
            <ContactItem>
              <div className="icon">üìç</div>
              <div className="text">
                <h4>–õ–æ–∫–∞—Ü–∏—è</h4>
                <p>–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è</p>
              </div>
            </ContactItem>
            
            <SocialLinks>
              <a href="#" aria-label="GitHub">GH</a>
              <a href="#" aria-label="LinkedIn">LI</a>
              <a href="#" aria-label="Telegram">TG</a>
            </SocialLinks>
          </ContactInfo>
          
          <FormContainer
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h3>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h3>
            {alert && (
              <Alert $success={alert.success}>
                {alert.message}
              </Alert>
            )}
            <Form onSubmit={handleSubmit}>
              <FormGroup>
                <label htmlFor="name">–ò–º—è</label>
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  value={formData.name} 
                  onChange={handleChange} 
                  required 
                  placeholder="–í–∞—à–µ –∏–º—è"
                />
              </FormGroup>
              
              <FormGroup>
                <label htmlFor="email">Email</label>
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  value={formData.email} 
                  onChange={handleChange} 
                  required 
                  placeholder="your@email.com"
                />
              </FormGroup>
              
              <FormGroup>
                <label htmlFor="subject">–¢–µ–º–∞</label>
                <input 
                  type="text" 
                  id="subject" 
                  name="subject" 
                  value={formData.subject} 
                  onChange={handleChange} 
                  required 
                  placeholder="–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
                />
              </FormGroup>
              
              <FormGroup>
                <label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                <textarea 
                  id="message" 
                  name="message" 
                  value={formData.message} 
                  onChange={handleChange} 
                  required 
                  placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                />
              </FormGroup>
              
              <SubmitButton 
                type="submit" 
                disabled={isSubmitting}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </SubmitButton>
            </Form>
          </FormContainer>
        </ContactContent>
      </Container>
    </ContactSection>
  );
}

export default ContactForm; 